//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3053
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Granity.granityMgr.Resources.ParkMgr.Report {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSet2")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet2 : global::System.Data.DataSet {
        
        private 停车场收费统计DataTable table停车场收费统计;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet2() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet2(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["停车场收费统计"] != null)) {
                    base.Tables.Add(new 停车场收费统计DataTable(ds.Tables["停车场收费统计"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 停车场收费统计DataTable 停车场收费统计 {
            get {
                return this.table停车场收费统计;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSet2 cln = ((DataSet2)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["停车场收费统计"] != null)) {
                    base.Tables.Add(new 停车场收费统计DataTable(ds.Tables["停车场收费统计"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.table停车场收费统计 = ((停车场收费统计DataTable)(base.Tables["停车场收费统计"]));
            if ((initTable == true)) {
                if ((this.table停车场收费统计 != null)) {
                    this.table停车场收费统计.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet2";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet2.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.table停车场收费统计 = new 停车场收费统计DataTable();
            base.Tables.Add(this.table停车场收费统计);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize停车场收费统计() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSet2 ds = new DataSet2();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void 停车场收费统计RowChangeEventHandler(object sender, 停车场收费统计RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 停车场收费统计DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn column卡号;
            
            private global::System.Data.DataColumn column卡型;
            
            private global::System.Data.DataColumn column用户编号;
            
            private global::System.Data.DataColumn column打印编号;
            
            private global::System.Data.DataColumn column日期;
            
            private global::System.Data.DataColumn column入场日期;
            
            private global::System.Data.DataColumn column车牌;
            
            private global::System.Data.DataColumn column车型;
            
            private global::System.Data.DataColumn column收费金额;
            
            private global::System.Data.DataColumn column出场图片;
            
            private global::System.Data.DataColumn column出场门岗;
            
            private global::System.Data.DataColumn column操作员;
            
            private global::System.Data.DataColumn column临免卡;
            
            private global::System.Data.DataColumn column贵宾卡;
            
            private global::System.Data.DataColumn column储值卡;
            
            private global::System.Data.DataColumn column临时卡;
            
            private global::System.Data.DataColumn column一卡通;
            
            private global::System.Data.DataColumn column时段卡;
            
            private global::System.Data.DataColumn column授权卡;
            
            private global::System.Data.DataColumn column免费卡;
            
            private global::System.Data.DataColumn column总金额;
            
            private global::System.Data.DataColumn column门岗;
            
            private global::System.Data.DataColumn column时间;
            
            private global::System.Data.DataColumn column期卡;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 停车场收费统计DataTable() {
                this.TableName = "停车场收费统计";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 停车场收费统计DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 停车场收费统计DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 卡号Column {
                get {
                    return this.column卡号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 卡型Column {
                get {
                    return this.column卡型;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 用户编号Column {
                get {
                    return this.column用户编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 打印编号Column {
                get {
                    return this.column打印编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 日期Column {
                get {
                    return this.column日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 入场日期Column {
                get {
                    return this.column入场日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 车牌Column {
                get {
                    return this.column车牌;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 车型Column {
                get {
                    return this.column车型;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 收费金额Column {
                get {
                    return this.column收费金额;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 出场图片Column {
                get {
                    return this.column出场图片;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 出场门岗Column {
                get {
                    return this.column出场门岗;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 操作员Column {
                get {
                    return this.column操作员;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 临免卡Column {
                get {
                    return this.column临免卡;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 贵宾卡Column {
                get {
                    return this.column贵宾卡;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 储值卡Column {
                get {
                    return this.column储值卡;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 临时卡Column {
                get {
                    return this.column临时卡;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 一卡通Column {
                get {
                    return this.column一卡通;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 时段卡Column {
                get {
                    return this.column时段卡;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 授权卡Column {
                get {
                    return this.column授权卡;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 免费卡Column {
                get {
                    return this.column免费卡;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 总金额Column {
                get {
                    return this.column总金额;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 门岗Column {
                get {
                    return this.column门岗;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 时间Column {
                get {
                    return this.column时间;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 期卡Column {
                get {
                    return this.column期卡;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 停车场收费统计Row this[int index] {
                get {
                    return ((停车场收费统计Row)(this.Rows[index]));
                }
            }
            
            public event 停车场收费统计RowChangeEventHandler 停车场收费统计RowChanging;
            
            public event 停车场收费统计RowChangeEventHandler 停车场收费统计RowChanged;
            
            public event 停车场收费统计RowChangeEventHandler 停车场收费统计RowDeleting;
            
            public event 停车场收费统计RowChangeEventHandler 停车场收费统计RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add停车场收费统计Row(停车场收费统计Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 停车场收费统计Row Add停车场收费统计Row(
                        System.Guid ID, 
                        string 卡号, 
                        int 卡型, 
                        string 用户编号, 
                        string 打印编号, 
                        System.DateTime 日期, 
                        System.DateTime 入场日期, 
                        string 车牌, 
                        string 车型, 
                        decimal 收费金额, 
                        string 出场图片, 
                        System.Guid 出场门岗, 
                        string 操作员, 
                        decimal 临免卡, 
                        decimal 贵宾卡, 
                        decimal 储值卡, 
                        decimal 临时卡, 
                        decimal 一卡通, 
                        decimal 时段卡, 
                        decimal 授权卡, 
                        decimal 免费卡, 
                        decimal 总金额, 
                        string 门岗, 
                        string 时间, 
                        decimal 期卡) {
                停车场收费统计Row row停车场收费统计Row = ((停车场收费统计Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        卡号,
                        卡型,
                        用户编号,
                        打印编号,
                        日期,
                        入场日期,
                        车牌,
                        车型,
                        收费金额,
                        出场图片,
                        出场门岗,
                        操作员,
                        临免卡,
                        贵宾卡,
                        储值卡,
                        临时卡,
                        一卡通,
                        时段卡,
                        授权卡,
                        免费卡,
                        总金额,
                        门岗,
                        时间,
                        期卡};
                row停车场收费统计Row.ItemArray = columnValuesArray;
                this.Rows.Add(row停车场收费统计Row);
                return row停车场收费统计Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                停车场收费统计DataTable cln = ((停车场收费统计DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 停车场收费统计DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.column卡号 = base.Columns["卡号"];
                this.column卡型 = base.Columns["卡型"];
                this.column用户编号 = base.Columns["用户编号"];
                this.column打印编号 = base.Columns["打印编号"];
                this.column日期 = base.Columns["日期"];
                this.column入场日期 = base.Columns["入场日期"];
                this.column车牌 = base.Columns["车牌"];
                this.column车型 = base.Columns["车型"];
                this.column收费金额 = base.Columns["收费金额"];
                this.column出场图片 = base.Columns["出场图片"];
                this.column出场门岗 = base.Columns["出场门岗"];
                this.column操作员 = base.Columns["操作员"];
                this.column临免卡 = base.Columns["临免卡"];
                this.column贵宾卡 = base.Columns["贵宾卡"];
                this.column储值卡 = base.Columns["储值卡"];
                this.column临时卡 = base.Columns["临时卡"];
                this.column一卡通 = base.Columns["一卡通"];
                this.column时段卡 = base.Columns["时段卡"];
                this.column授权卡 = base.Columns["授权卡"];
                this.column免费卡 = base.Columns["免费卡"];
                this.column总金额 = base.Columns["总金额"];
                this.column门岗 = base.Columns["门岗"];
                this.column时间 = base.Columns["时间"];
                this.column期卡 = base.Columns["期卡"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.column卡号 = new global::System.Data.DataColumn("卡号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column卡号);
                this.column卡型 = new global::System.Data.DataColumn("卡型", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column卡型);
                this.column用户编号 = new global::System.Data.DataColumn("用户编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column用户编号);
                this.column打印编号 = new global::System.Data.DataColumn("打印编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column打印编号);
                this.column日期 = new global::System.Data.DataColumn("日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column日期);
                this.column入场日期 = new global::System.Data.DataColumn("入场日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column入场日期);
                this.column车牌 = new global::System.Data.DataColumn("车牌", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column车牌);
                this.column车型 = new global::System.Data.DataColumn("车型", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column车型);
                this.column收费金额 = new global::System.Data.DataColumn("收费金额", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column收费金额);
                this.column出场图片 = new global::System.Data.DataColumn("出场图片", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column出场图片);
                this.column出场门岗 = new global::System.Data.DataColumn("出场门岗", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column出场门岗);
                this.column操作员 = new global::System.Data.DataColumn("操作员", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column操作员);
                this.column临免卡 = new global::System.Data.DataColumn("临免卡", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column临免卡);
                this.column贵宾卡 = new global::System.Data.DataColumn("贵宾卡", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column贵宾卡);
                this.column储值卡 = new global::System.Data.DataColumn("储值卡", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column储值卡);
                this.column临时卡 = new global::System.Data.DataColumn("临时卡", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column临时卡);
                this.column一卡通 = new global::System.Data.DataColumn("一卡通", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column一卡通);
                this.column时段卡 = new global::System.Data.DataColumn("时段卡", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column时段卡);
                this.column授权卡 = new global::System.Data.DataColumn("授权卡", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column授权卡);
                this.column免费卡 = new global::System.Data.DataColumn("免费卡", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column免费卡);
                this.column总金额 = new global::System.Data.DataColumn("总金额", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column总金额);
                this.column门岗 = new global::System.Data.DataColumn("门岗", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column门岗);
                this.column时间 = new global::System.Data.DataColumn("时间", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column时间);
                this.column期卡 = new global::System.Data.DataColumn("期卡", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column期卡);
                this.column卡号.AllowDBNull = false;
                this.column卡号.MaxLength = 20;
                this.column用户编号.MaxLength = 20;
                this.column打印编号.MaxLength = 20;
                this.column车牌.MaxLength = 20;
                this.column出场图片.MaxLength = 200;
                this.column操作员.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 停车场收费统计Row New停车场收费统计Row() {
                return ((停车场收费统计Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 停车场收费统计Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(停车场收费统计Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.停车场收费统计RowChanged != null)) {
                    this.停车场收费统计RowChanged(this, new 停车场收费统计RowChangeEvent(((停车场收费统计Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.停车场收费统计RowChanging != null)) {
                    this.停车场收费统计RowChanging(this, new 停车场收费统计RowChangeEvent(((停车场收费统计Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.停车场收费统计RowDeleted != null)) {
                    this.停车场收费统计RowDeleted(this, new 停车场收费统计RowChangeEvent(((停车场收费统计Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.停车场收费统计RowDeleting != null)) {
                    this.停车场收费统计RowDeleting(this, new 停车场收费统计RowChangeEvent(((停车场收费统计Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove停车场收费统计Row(停车场收费统计Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "停车场收费统计DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 停车场收费统计Row : global::System.Data.DataRow {
            
            private 停车场收费统计DataTable table停车场收费统计;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 停车场收费统计Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table停车场收费统计 = ((停车场收费统计DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ID {
                get {
                    try {
                        return ((global::System.Guid)(this[this.table停车场收费统计.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 卡号 {
                get {
                    return ((string)(this[this.table停车场收费统计.卡号Column]));
                }
                set {
                    this[this.table停车场收费统计.卡号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 卡型 {
                get {
                    try {
                        return ((int)(this[this.table停车场收费统计.卡型Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“卡型”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.卡型Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 用户编号 {
                get {
                    try {
                        return ((string)(this[this.table停车场收费统计.用户编号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“用户编号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.用户编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 打印编号 {
                get {
                    try {
                        return ((string)(this[this.table停车场收费统计.打印编号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“打印编号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.打印编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 日期 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.table停车场收费统计.日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 入场日期 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.table停车场收费统计.入场日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“入场日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.入场日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 车牌 {
                get {
                    try {
                        return ((string)(this[this.table停车场收费统计.车牌Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“车牌”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.车牌Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 车型 {
                get {
                    try {
                        return ((string)(this[this.table停车场收费统计.车型Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“车型”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.车型Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 收费金额 {
                get {
                    try {
                        return ((decimal)(this[this.table停车场收费统计.收费金额Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“收费金额”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.收费金额Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 出场图片 {
                get {
                    try {
                        return ((string)(this[this.table停车场收费统计.出场图片Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“出场图片”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.出场图片Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid 出场门岗 {
                get {
                    try {
                        return ((global::System.Guid)(this[this.table停车场收费统计.出场门岗Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“出场门岗”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.出场门岗Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 操作员 {
                get {
                    try {
                        return ((string)(this[this.table停车场收费统计.操作员Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“操作员”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.操作员Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 临免卡 {
                get {
                    try {
                        return ((decimal)(this[this.table停车场收费统计.临免卡Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“临免卡”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.临免卡Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 贵宾卡 {
                get {
                    try {
                        return ((decimal)(this[this.table停车场收费统计.贵宾卡Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“贵宾卡”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.贵宾卡Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 储值卡 {
                get {
                    try {
                        return ((decimal)(this[this.table停车场收费统计.储值卡Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“储值卡”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.储值卡Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 临时卡 {
                get {
                    try {
                        return ((decimal)(this[this.table停车场收费统计.临时卡Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“临时卡”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.临时卡Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 一卡通 {
                get {
                    try {
                        return ((decimal)(this[this.table停车场收费统计.一卡通Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“一卡通”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.一卡通Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 时段卡 {
                get {
                    try {
                        return ((decimal)(this[this.table停车场收费统计.时段卡Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“时段卡”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.时段卡Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 授权卡 {
                get {
                    try {
                        return ((decimal)(this[this.table停车场收费统计.授权卡Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“授权卡”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.授权卡Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 免费卡 {
                get {
                    try {
                        return ((decimal)(this[this.table停车场收费统计.免费卡Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“免费卡”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.免费卡Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 总金额 {
                get {
                    try {
                        return ((decimal)(this[this.table停车场收费统计.总金额Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“总金额”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.总金额Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 门岗 {
                get {
                    try {
                        return ((string)(this[this.table停车场收费统计.门岗Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“门岗”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.门岗Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 时间 {
                get {
                    try {
                        return ((string)(this[this.table停车场收费统计.时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.时间Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 期卡 {
                get {
                    try {
                        return ((decimal)(this[this.table停车场收费统计.期卡Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“停车场收费统计”中列“期卡”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table停车场收费统计.期卡Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.table停车场收费统计.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.table停车场收费统计.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is卡型Null() {
                return this.IsNull(this.table停车场收费统计.卡型Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set卡型Null() {
                this[this.table停车场收费统计.卡型Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is用户编号Null() {
                return this.IsNull(this.table停车场收费统计.用户编号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set用户编号Null() {
                this[this.table停车场收费统计.用户编号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is打印编号Null() {
                return this.IsNull(this.table停车场收费统计.打印编号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set打印编号Null() {
                this[this.table停车场收费统计.打印编号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is日期Null() {
                return this.IsNull(this.table停车场收费统计.日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set日期Null() {
                this[this.table停车场收费统计.日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is入场日期Null() {
                return this.IsNull(this.table停车场收费统计.入场日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set入场日期Null() {
                this[this.table停车场收费统计.入场日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is车牌Null() {
                return this.IsNull(this.table停车场收费统计.车牌Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set车牌Null() {
                this[this.table停车场收费统计.车牌Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is车型Null() {
                return this.IsNull(this.table停车场收费统计.车型Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set车型Null() {
                this[this.table停车场收费统计.车型Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is收费金额Null() {
                return this.IsNull(this.table停车场收费统计.收费金额Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set收费金额Null() {
                this[this.table停车场收费统计.收费金额Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is出场图片Null() {
                return this.IsNull(this.table停车场收费统计.出场图片Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set出场图片Null() {
                this[this.table停车场收费统计.出场图片Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is出场门岗Null() {
                return this.IsNull(this.table停车场收费统计.出场门岗Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set出场门岗Null() {
                this[this.table停车场收费统计.出场门岗Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is操作员Null() {
                return this.IsNull(this.table停车场收费统计.操作员Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set操作员Null() {
                this[this.table停车场收费统计.操作员Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is临免卡Null() {
                return this.IsNull(this.table停车场收费统计.临免卡Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set临免卡Null() {
                this[this.table停车场收费统计.临免卡Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is贵宾卡Null() {
                return this.IsNull(this.table停车场收费统计.贵宾卡Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set贵宾卡Null() {
                this[this.table停车场收费统计.贵宾卡Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is储值卡Null() {
                return this.IsNull(this.table停车场收费统计.储值卡Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set储值卡Null() {
                this[this.table停车场收费统计.储值卡Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is临时卡Null() {
                return this.IsNull(this.table停车场收费统计.临时卡Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set临时卡Null() {
                this[this.table停车场收费统计.临时卡Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is一卡通Null() {
                return this.IsNull(this.table停车场收费统计.一卡通Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set一卡通Null() {
                this[this.table停车场收费统计.一卡通Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is时段卡Null() {
                return this.IsNull(this.table停车场收费统计.时段卡Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set时段卡Null() {
                this[this.table停车场收费统计.时段卡Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is授权卡Null() {
                return this.IsNull(this.table停车场收费统计.授权卡Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set授权卡Null() {
                this[this.table停车场收费统计.授权卡Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is免费卡Null() {
                return this.IsNull(this.table停车场收费统计.免费卡Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set免费卡Null() {
                this[this.table停车场收费统计.免费卡Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is总金额Null() {
                return this.IsNull(this.table停车场收费统计.总金额Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set总金额Null() {
                this[this.table停车场收费统计.总金额Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is门岗Null() {
                return this.IsNull(this.table停车场收费统计.门岗Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set门岗Null() {
                this[this.table停车场收费统计.门岗Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is时间Null() {
                return this.IsNull(this.table停车场收费统计.时间Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set时间Null() {
                this[this.table停车场收费统计.时间Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is期卡Null() {
                return this.IsNull(this.table停车场收费统计.期卡Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set期卡Null() {
                this[this.table停车场收费统计.期卡Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 停车场收费统计RowChangeEvent : global::System.EventArgs {
            
            private 停车场收费统计Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 停车场收费统计RowChangeEvent(停车场收费统计Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 停车场收费统计Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Granity.granityMgr.Resources.ParkMgr.Report.DataSet2TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class 停车场收费统计TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public 停车场收费统计TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "停车场收费统计";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("卡号", "卡号");
            tableMapping.ColumnMappings.Add("卡型", "卡型");
            tableMapping.ColumnMappings.Add("用户编号", "用户编号");
            tableMapping.ColumnMappings.Add("打印编号", "打印编号");
            tableMapping.ColumnMappings.Add("日期", "日期");
            tableMapping.ColumnMappings.Add("入场日期", "入场日期");
            tableMapping.ColumnMappings.Add("车牌", "车牌");
            tableMapping.ColumnMappings.Add("车型", "车型");
            tableMapping.ColumnMappings.Add("收费金额", "收费金额");
            tableMapping.ColumnMappings.Add("出场图片", "出场图片");
            tableMapping.ColumnMappings.Add("出场门岗", "出场门岗");
            tableMapping.ColumnMappings.Add("操作员", "操作员");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [park].[出场记录] ([ID], [卡号], [卡型], [用户编号], [打印编号], [日期], [入场日期], [车牌], " +
                "[车型], [收费金额], [出场图片], [出场门岗], [操作员]) VALUES (@ID, @卡号, @卡型, @用户编号, @打印编号, @日期, @" +
                "入场日期, @车牌, @车型, @收费金额, @出场图片, @出场门岗, @操作员)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@卡号", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "卡号", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@卡型", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "卡型", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@用户编号", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "用户编号", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@打印编号", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "打印编号", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@日期", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "日期", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@入场日期", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "入场日期", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@车牌", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "车牌", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@车型", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "车型", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@收费金额", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "收费金额", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@出场图片", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "出场图片", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@出场门岗", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "出场门岗", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@操作员", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "操作员", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Granity.granityMgr.Properties.Settings.Default.SmartCardConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, 卡号, 卡型, 用户编号, 打印编号, 日期, 入场日期, 车牌, 车型, 收费金额, 出场图片, 出场门岗, 操作员 FROM park." +
                "出场记录";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.停车场收费统计DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.停车场收费统计DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.停车场收费统计DataTable dataTable = new DataSet2.停车场收费统计DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet2.停车场收费统计DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet2 dataSet) {
            return this.Adapter.Update(dataSet, "停车场收费统计");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<global::System.Guid> ID, string 卡号, global::System.Nullable<int> 卡型, string 用户编号, string 打印编号, global::System.Nullable<global::System.DateTime> 日期, global::System.Nullable<global::System.DateTime> 入场日期, string 车牌, global::System.Nullable<int> 车型, global::System.Nullable<decimal> 收费金额, string 出场图片, global::System.Nullable<global::System.Guid> 出场门岗, string 操作员) {
            if ((ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((卡号 == null)) {
                throw new global::System.ArgumentNullException("卡号");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(卡号));
            }
            if ((卡型.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(卡型.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((用户编号 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(用户编号));
            }
            if ((打印编号 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(打印编号));
            }
            if ((日期.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(日期.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((入场日期.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(入场日期.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((车牌 == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(车牌));
            }
            if ((车型.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(车型.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((收费金额.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(收费金额.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((出场图片 == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(出场图片));
            }
            if ((出场门岗.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((System.Guid)(出场门岗.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((操作员 == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(操作员));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591